{"version":3,"sources":["autocomplete.js","App.js","serviceWorker.js","index.js","medicine.png"],"names":["escapeRegexCharacters","str","replace","AutoComplete","state","value","suggestions","getSuggestionValue","suggestion","b","getSuggestions","escapedValue","renderSuggestion","genericName","brandName","length","g","toLowerCase","className","s","onChange","event","newValue","setState","onSuggestionsFetchRequested","a","searchQueryName","fetch","then","res","json","result","error","isLoaded","onSuggestionsClearRequested","this","debounce","inputProps","placeholder","autoFocus","React","Component","rootElement","document","getElementById","ReactDOM","render","App","src","logo","alt","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","console","message","module","exports"],"mappings":"uXAMA,SAASA,EAAuBC,GAC5B,OAAOA,EAAIC,QAAQ,sBAAuB,Q,IAGxCC,E,4MACFC,MAAQ,CACJC,MAAO,GACPC,YAAa,I,EAUjBC,mBAAqB,SAAAC,GACjB,OAAOA,EAAWC,G,EAGtBC,eAAiB,SAAAL,GACb,IAAMM,EAAeX,EAAsBK,GAC3C,MAAqB,KAAjBM,EACO,GAEJA,G,EAGXC,iBAAmB,SAAAJ,GACf,IAAIK,EACAC,EAAYN,EAAWC,EAc3B,OAZIK,EAAUC,OAAS,KAEnBD,GAAa,6CAIbD,EADAL,EAAWC,IAAMD,EAAWQ,EACd,aAEdH,EAAW,WAAOL,EAAWQ,EAAlB,MACeC,cAI1B,yBAAKC,UAAU,aACX,6BAAMJ,EACF,yBAAKI,UAAU,WAAWL,IAG9B,yBAAKK,UAAU,YAAYV,EAAWW,K,EAKlDC,SAAW,SAACC,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,SACjB,EAAKC,SAAS,CAAElB,MAAOiB,K,EAG3BE,4B,uCAA8B,+BAAAC,EAAA,6DAASpB,EAAT,EAASA,MAC7BqB,EAAkB,EAAKhB,eAAeL,GADlB,SAEpBsB,MAAM,kBAAD,OAAmBD,IACzBE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,EAAKR,SAAS,CAAEjB,YAAayB,OAKjC,SAACC,GACG,EAAKT,SAAS,CACVU,UAAU,EACVD,aAdU,2C,wDAmB9BE,4BAA8B,WAC1B,EAAKX,SAAS,CAAEjB,YAAa,M,mEArE7B6B,KAAKX,4BAA8BY,YAC/B,GACAD,KAAKX,+B,+BAsEF,IAAD,EACyBW,KAAK/B,MAA5BC,EADF,EACEA,MAAOC,EADT,EACSA,YACT+B,EAAa,CACfC,YAAa,0BACbjC,QACAe,SAAUe,KAAKf,SACfmB,WAAW,GAGf,OACI,yBAAKrB,UAAU,QACX,yBAAKA,UAAU,SAAf,wDAEA,kBAAC,IAAD,CACIZ,YAAaA,EACbkB,4BAA6BW,KAAKX,4BAClCU,4BAA6BC,KAAKD,4BAClC3B,mBAAoB,SAAAC,GAAU,OAAIA,EAAWC,GAC7CG,iBAAkBuB,KAAKvB,iBACvByB,WAAYA,S,GAlGLG,IAAMC,WAyGlBtC,IAETuC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,MAAkBJ,GCnGnBK,MAdf,WACE,OACE,yBAAK7B,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,yBAAK8B,IAAKC,IAAM/B,UAAU,WAAWgC,IAAI,kBACzC,2HCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNV,IAASC,OACP,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,OAEFb,SAASC,eAAe,SDyHpB,kBAAmBa,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.a4ed009d.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Autosuggest from 'react-autosuggest'\nimport { debounce } from 'throttle-debounce'\nimport './styles.css'\n\nfunction escapeRegexCharacters (str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nclass AutoComplete extends React.Component {\n    state = {\n        value: '',\n        suggestions: []\n    }\n\n    componentWillMount () {\n        this.onSuggestionsFetchRequested = debounce(\n            0.5,\n            this.onSuggestionsFetchRequested\n        )\n    }\n\n    getSuggestionValue = suggestion => {\n        return suggestion.b;\n    }\n\n    getSuggestions = value => {\n        const escapedValue = escapeRegexCharacters(value);\n        if (escapedValue === '') {\n            return [];\n        }\n        return escapedValue;\n    }\n\n    renderSuggestion = suggestion => {\n        let genericName;\n        let brandName = suggestion.b;\n\n        if (brandName.length < 44) {\n            //pad it brand name\n            brandName += '                                         ';\n        }\n\n        if (suggestion.b === suggestion.g) {\n            genericName = '(generic)';\n        } else {\n            genericName = `(${suggestion.g})`;\n            genericName = genericName.toLowerCase();\n        }\n\n        return (\n            <div className=\"brandname\">\n                <div>{brandName}\n                    <div className=\"generic\">{genericName}</div>\n                </div>\n\n                <div className=\"strength\">{suggestion.s}</div>\n            </div>\n        )\n    }\n\n    onChange = (event, { newValue }) => {\n        this.setState({ value: newValue })\n    }\n\n    onSuggestionsFetchRequested = async ({ value }) => {\n        const searchQueryName = this.getSuggestions(value);\n        await fetch(`/api/search/?q=${searchQueryName}`)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({ suggestions: result })\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block else we will swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                })\n    }\n\n    onSuggestionsClearRequested = () => {\n        this.setState({ suggestions: [] })\n    }\n\n    render () {\n        const { value, suggestions } = this.state\n        const inputProps = {\n            placeholder: 'Type medication name...',\n            value,\n            onChange: this.onChange,\n            autoFocus: true\n        }\n\n        return (\n            <div className=\"App1\">\n                <div className=\"title\">\n                    Medication Search for brands and associated generics</div>\n                <Autosuggest\n                    suggestions={suggestions}\n                    onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                    onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                    getSuggestionValue={suggestion => suggestion.b}\n                    renderSuggestion={this.renderSuggestion}\n                    inputProps={inputProps}\n                />\n            </div>\n        )\n    }\n}\n\nexport default AutoComplete;\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<AutoComplete />, rootElement)\n","import React from 'react';\nimport logo from './medicine.png';\nimport './App.css';\nimport Autocomplete from './autocomplete';\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Autocomplete />\n        <img src={logo} className=\"App-logo\" alt=\"medicine logo\" />\n        <p>\n          Utilizing approximate string matching, informally known as fuzzy search, partial truth...\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/medicine.74a7e184.png\";"],"sourceRoot":""}